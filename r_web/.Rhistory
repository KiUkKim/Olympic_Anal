####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent({output$click,
print("hi")})
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(output$click,
print("hi"))
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(output$click,{
print("hi")})
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton(inputId = "click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(output$click,{
print("hi")})
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(input$click,{
print("hi")})
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(input$click,{
rD <- rsDriver(port=1232L,chromever="95.0.4638.69")
remDR<- rD$client
remDR$open()
})
})
shinyApp(ui = ui, server = server)
####### 올림픽공원 각 문 분포도 + 전체 차량수 예측 #######
#######            R shiny Web Project             #######
####### Producer. Jin Baek Lee, Ki Uk Kim          #######
# 경로 설정
setwd("C:\\Users\\KIUK\\Desktop\\map_workspace\\r_web")
setRepositories(ind = 1:7)
# 필요 패키지 설치
#install.packages("ggmap")
# install.packages("shiny")
# ggmap 2.7 설치
# install.packages("devtools")
# devtools::install_github('dkahle/ggmap')
# 필요한 패키지 다운로드
library(shiny)
library(ggmap)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(stringr)
library(reshape)
library(plotly)
##셀레니움 패키지
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
# 구글 지도 API 인증키 등록
register_google(key = 'AIzaSyB0hz2PKlXN5hZGSQSf-s3zUxg-NgQ1bDA')
# 데이터 전처리
map <- get_map(location=c(lon = 127.12081265253084, lat = 37.52045297279662),
zoom = 15,
maptype = 'roadmap')
# ui.R
ui <- shinyUI(fluidPage(
column(3, wellPanel(
selectInput(inputId = "selectType",
label = h4("실제/예측 값"),
choices = c("실제", "예측"),
width = 400),
selectInput(inputId = "selectTime",
label = h4("시간"),
choice = "0", "1",
width = 400),
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("map_test_value"),
plotOutput("plot2", width="100%", height = 294)
)),
textInput("온도","온도를 입력하세요."),
textInput("습도", "습도를 입력하세요."),
actionButton("click", "Play"),
plotlyOutput("map")
))
## server.R
server <- shinyServer(function(input, output){
autoInvalidate <- reactiveTimer()
output$map <- renderPlotly({
plot <- ggmap(map)
})
observeEvent(input$click,{
rD <- rsDriver(port=1232L,chromever="95.0.4638.69")
remDR<- rD$client
remDR$open()
})
})
shinyApp(ui = ui, server = server)
library(shinydashboard)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(DT)
library(shinymanager)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(DT)
library(shinymanager)
library("RSelenium")
library("rJava")
library("XML")
library("rvest")
install.packages("shinymanager")
credentials <- data.frame(
user = c("123", "shinymanager"),
password = c("123", "shinymanager"), stringsAsFactors = FALSE)
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
library(RSelenium)
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
driver <- remoteDriver()
driver$open()
driver$navigate("https://www.google.com/")
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre1.8.0_311')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_311')
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
Sys.setenv(JAVA_HOME = C:/Program Files/Java/jre1.8.0_311)
Sys.setenv(JAVA_HOME = C:\\Program Files\\Java\\jre1.8.0_311)
Sys.setenv(JAVA_HOME = 'C:\\Program Files\\Java\\jre1.8.0_311')
Sys.setenv(JAVA_HOME = 'C:\\Program Files\\Java\\jre1.8.0_311\\')
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
Sys.setenv(JAVA_HOME = 'C:\\Program Files\\Java\\jre1.8.0_311\\')
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
Sys.setenv(JAVA_HOME = 'C:\\Program Files\\Java\\jre1.8.0_311\\')
library(RSelenium)
library("rJava")
library("XML")
library("rvest")
credentials <- data.frame(
user = c("123", "shinymanager"),
password = c("123", "shinymanager"), stringsAsFactors = FALSE)
Sys.setenv(JAVA_HOME = 'C:\\Program Files\\Java\\jre1.8.0_311\\')
driver <- rsDriver(port=1234L,chromever="95.0.4638.69")
